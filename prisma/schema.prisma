// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

enum InvoiceStatus {
  PAID
  UNPAID
  OVERDUE
}

enum ProductType {
  PHYSICAL
  SERVICE
  DIGITAL
  OTHER
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  password      String?
  phone         String?
  address       String?
  role          UserRole   @default(USER)
  accounts      Account[]
  businesses    Business[]
  clients       Client[]
  invoices      Invoice[]
  products      Product[]

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  @@map("users")
}

model Business {
  id                 String  @id @default(cuid())
  name               String
  address            String
  registrationNumber String  @map("registration_number")
  description        String?
  industry           String

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("businesses")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Client {
  id             String  @id @default(cuid())
  name           String
  email          String
  billingAddress String  @map("billing_address")
  phone          String
  businessName   String? @map("business_name")
  image          String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  invoices Invoice[]

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("clients")
}

model Invoice {
  id        String        @id @default(cuid())
  issueDate DateTime      @default(now()) @map("issue_date")
  dueDate   DateTime      @map("due_date")
  issuedTo  String        @map("issued_to")
  amount    Float
  invoiceNo Int           @default(autoincrement()) @map("invoice_no")
  status    InvoiceStatus @default(UNPAID)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  clientId String @map("client_id")
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([userId, clientId])
  @@map("invoices")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String      @db.Text
  price       Float
  type        ProductType
  available   Boolean     @default(true)
  imageURL    String      @map("image_url")
  quantity    Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("products")
}
